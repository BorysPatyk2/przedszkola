
<table>

    @foreach (List<Card> cardRow in cards)
    {
        <tr>
            @foreach (Card card in cardRow)
            {
                <td>
                    <div class="flip-card" style=@(!card.flipped ? "transform: rotateY(180deg);" : "")>
                        <div class="flip-card-inner" style=@(!card.flipped ? "transform: rotateY(180deg);" : "")>
                            <div class="flip-card-front" style="background-color: @(card.flipped ? card.color : "#aaa");">
                                <img class="tile-img" src=@card.text />
                            </div>
                            <div class="flip-card-back" @onclick="() => flip(card)">
                            </div>
                        </div>
                    </div>
                </td>
            }
        </tr>
    }
</table>

<style>
    .tile-img
    {
        height: 100%;
        width: 100%;
    }
    .flip-card {
        background-color: transparent;
        width: 11vw;
        height: 11vw;
        perspective: 1000px;
        display: inline-block;
        margin-left: 4px;
        margin-right: 4px;
    }

    .flip-card-inner {
        position: relative;
        width: 100%;
        height: 100%;
        text-align: center;
        transition: transform 0.6s;
        transform-style: preserve-3d;
        background-color: #00a1ff;
    }

    .flip-card-front, .flip-card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        -webkit-backface-visibility: hidden;
        backface-visibility: hidden;
    }

    .flip-card-front {
        color: white;
        font-size: 7vw;
    }

    .flip-card-back {
        transform: rotateY(180deg);
        background: #aaa;
    }
</style>
@code {
    protected List<List<Card>> cards { get; set; }

    protected List<Card> flippedCards = new List<Card>();

    protected int wrongs = 0;

    protected int victories = 0;

    protected bool flipping = false;

    protected override void OnInitialized()
    {
        startGame();
    }

    public void startGame()
    {
        var uniqueCards = new List<Card>();
        uniqueCards.Add(new Card() { number = 1, color = "red" });
        uniqueCards.Add(new Card() { number = 2, color = "green" });
        uniqueCards.Add(new Card() { number = 3, color = "blue" });
        uniqueCards.Add(new Card() { number = 4, color = "yellow" });
        uniqueCards.Add(new Card() { number = 5, color = "cyan" });
        uniqueCards.Add(new Card() { number = 6, color = "orange" });
        uniqueCards.Add(new Card() { number = 7, color = "pink" });
        uniqueCards.Add(new Card() { number = 8, color = "lightblue" });
        uniqueCards.AddRange(uniqueCards.Select(c => new Card() { number = c.number, color = c.color }).ToList());
        var cardPairs = uniqueCards.OrderBy(x => Guid.NewGuid()).ToList();


        cards = new List<List<Card>>();
        for (int i = 0; i < 16; i++)
        {
            if (i % 4 == 0)
            {
                cards.Add(new List<Card>());
            }
            cards[i / 4].Add(cardPairs[i]);
        }
    }

    public async Task flip(Card card)
    {
        if (flipping) return;
        flipping = true;
        card.flipped = true;
        await Task.Delay(100);
        flippedCards.Add(card);
        if (flippedCards.Count() % 2 == 0)
        {
            var lastTwo = flippedCards.TakeLast(2);
            var last = lastTwo.Last();
            var secondLast = lastTwo.First();
            if (last.number != secondLast.number)
            {
                await Task.Delay(600);
                wrongs++;
                last.flipped = false;
                secondLast.flipped = false;
                flippedCards.Remove(last);
                flippedCards.Remove(secondLast);
            }
        }
        if (flippedCards.Count() == 16)
        {
            flippedCards.Clear();
            await Task.Delay(600);
            wrongs = 0;
            victories++;
            startGame();
        }
        flipping = false;
    }

    public class Card
    {
        public string text { get { return flipped ? $"./img/tiles/animals/{number.ToString()}.png" : string.Empty; } }
        public int number { get; set; }
        public string color { get; set; }
        public bool flipped { get; set; }
    }

}